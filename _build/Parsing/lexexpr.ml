# 1 "Parsing/lexexpr.mll"
 
  open Parseexpr

# 6 "Parsing/lexexpr.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\075\000\085\000\247\255\248\255\011\000\250\255\251\255\
    \252\255\253\255\002\000\002\000\255\255\004\000\005\000\244\255\
    ";
  Lexing.lex_backtrk =
   "\255\255\010\000\009\000\255\255\255\255\006\000\255\255\255\255\
    \255\255\255\255\001\000\000\000\255\255\255\255\011\000\255\255\
    ";
  Lexing.lex_default =
   "\255\255\255\255\255\255\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\013\000\255\255\000\000\
    ";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\010\000\012\000\010\000\012\000\011\000\015\000\015\000\
    \000\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \010\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\006\000\008\000\000\000\007\000\000\000\005\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\013\000\004\000\000\000\003\000\000\000\000\000\
    \000\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \000\000\000\000\000\000\000\000\002\000\000\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \009\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\010\000\011\000\000\000\013\000\014\000\
    \255\255\013\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\010\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\255\255\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\005\000\000\000\255\255\000\000\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \255\255\255\255\255\255\255\255\002\000\255\255\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\013\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec nexttoken lexbuf =
   __ocaml_lex_nexttoken_rec lexbuf 0
and __ocaml_lex_nexttoken_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 15 "Parsing/lexexpr.mll"
            ( Lexing.new_line lexbuf; nexttoken lexbuf )
# 129 "Parsing/lexexpr.ml"

  | 1 ->
# 16 "Parsing/lexexpr.mll"
           ( nexttoken lexbuf )
# 134 "Parsing/lexexpr.ml"

  | 2 ->
# 17 "Parsing/lexexpr.mll"
        ( EOF )
# 139 "Parsing/lexexpr.ml"

  | 3 ->
# 18 "Parsing/lexexpr.mll"
        ( PLUS )
# 144 "Parsing/lexexpr.ml"

  | 4 ->
# 19 "Parsing/lexexpr.mll"
        ( MINUS )
# 149 "Parsing/lexexpr.ml"

  | 5 ->
# 20 "Parsing/lexexpr.mll"
        ( TIMES )
# 154 "Parsing/lexexpr.ml"

  | 6 ->
# 21 "Parsing/lexexpr.mll"
        ( DIV )
# 159 "Parsing/lexexpr.ml"

  | 7 ->
# 22 "Parsing/lexexpr.mll"
        ( SEMICOLON )
# 164 "Parsing/lexexpr.ml"

  | 8 ->
# 23 "Parsing/lexexpr.mll"
        ( EQUAL )
# 169 "Parsing/lexexpr.ml"

  | 9 ->
let
# 24 "Parsing/lexexpr.mll"
             str
# 175 "Parsing/lexexpr.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 24 "Parsing/lexexpr.mll"
                  ( IDENT str )
# 179 "Parsing/lexexpr.ml"

  | 10 ->
let
# 25 "Parsing/lexexpr.mll"
           nb
# 185 "Parsing/lexexpr.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 25 "Parsing/lexexpr.mll"
               ( INT (int_of_string nb) )
# 189 "Parsing/lexexpr.ml"

  | 11 ->
# 26 "Parsing/lexexpr.mll"
                   ( Lexing.new_line lexbuf; nexttoken lexbuf )
# 194 "Parsing/lexexpr.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_nexttoken_rec lexbuf __ocaml_lex_state

;;

# 28 "Parsing/lexexpr.mll"
 
let print_lexeme = function
    | EOF -> print_string "EOF"
    | PLUS -> print_string "+"
    | MINUS -> print_string "-"
    | TIMES -> print_string "*"
    | DIV -> print_string "/"
    | SEMICOLON -> print_string ";"
    | EQUAL -> print_string "="
    | INT i -> print_string "INT("; print_string(string_of_int i); print_string ")"
    | IDENT s -> print_string "IDENT("; print_string s; print_string ")"

let rec printtoken buf = 
  let token = nexttoken buf in
      print_int buf.lex_curr_p.pos_lnum;
      print_string ".     ";
      print_lexeme token;
      print_string "\n";
      token

# 222 "Parsing/lexexpr.ml"
